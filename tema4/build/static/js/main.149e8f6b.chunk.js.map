{"version":3,"sources":["stores/RobotStore.js","components/Robot.js","components/RobotList.js","components/RobotForm.js","components/App.js","serviceWorker.js","index.js"],"names":["RobotStore","Object","classCallCheck","this","robots","id","type","name","mass","emitter","EventEmitter","createClass","key","value","r","maxId","map","e","reduce","a","push","emit","Robot","_Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","item","props","react_default","createElement","Component","RobotList","_this","call","addRobot","store","state","_this2","setState","getRobots","addListener","i","components_Robot","App","components_RobotList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.149e8f6b.chunk.js","sourcesContent":["import {EventEmitter} from 'fbemitter'\r\n\r\nclass RobotStore{\r\n\tconstructor(){\r\n\t\tthis.robots = [{\r\n\t\t\tid : 1,\r\n\t\t\ttype : 'worker',\r\n\t\t\tname : 'tim',\r\n\t\t\tmass : 1000\r\n\t\t},{\r\n\t\t\tid : 2,\r\n\t\t\ttype : 'worker',\r\n\t\t\tname : 'tom',\r\n\t\t\tmass : 1500\r\n\t\t}]\r\n\t\tthis.emitter = new EventEmitter()\r\n\t}\r\n\taddRobot(r){\r\n\t\tlet maxId = this.robots.map((e) => e.id).reduce((a, e) => a > e ? a : e, 1)\r\n\t\tr.id = maxId + 1\r\n\t\tthis.robots.push(r)\r\n\t\tthis.emitter.emit('UPDATE')\r\n\t}\r\n\tgetRobots(){\r\n\t\treturn this.robots\r\n\t}\r\n}\r\n\r\nexport default RobotStore","import React, { Component } from 'react'\r\n\r\nclass Robot extends Component {\r\n  render() {\r\n  \tlet {item} = this.props\r\n    return (\r\n      <div>\r\n  \t\tHello, my name is {item.name}. I am a {item.type} and weigh {item.mass}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Robot","import React, { Component } from 'react'\r\nimport RobotStore from '../stores/RobotStore'\r\nimport Robot from './Robot'\r\nimport RobotForm from './RobotForm'\r\n\r\n\r\n\r\nclass RobotList extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots : []\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tthis.store = new RobotStore()\r\n\t\tthis.setState({\r\n\t\t\trobots : this.store.getRobots()\r\n\t\t})\r\n\t\tthis.store.emitter.addListener('UPDATE', () => {\r\n\t\t\tthis.setState({\r\n\t\t\t\trobots : this.store.getRobots()\r\n\t\t\t})\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n    addRobot = (r) => {\r\n\t\tthis.store.addRobot(r);\r\n\t}\r\n    \r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t \r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.robots.map((e, i) => \r\n\t\t\t\t\t\t<Robot item={e} key={i} />\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default RobotList","import React, { Component } from 'react'\r\n\r\nclass RobotForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            type: '',\r\n            mass: '',\r\n        };\r\n\r\n        this.handleChangeType=(event)=>{\r\n            this.setState({\r\n                type:event.target.value\r\n                });\r\n        }\r\n         this.handleChangeName=(event)=>{\r\n            this.setState({\r\n                name:event.target.value\r\n                });\r\n        }\r\n         this.handleChangeMass=(event)=>{\r\n            this.setState({\r\n                mass:event.target.value\r\n                });\r\n        }\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Robot Form</h2>\r\n\r\n                {/* se vor seta prop robotului odata ce se schimba valoarea inputului */}\r\n                <label htmlFor=\"name\">Name:</label>\r\n                <input type=\"text\" id=\"name\" placeholder=\"name\" onChange={e => this.setState({ name: e.target.value })} />\r\n\r\n                <label htmlFor=\"type\">Type:</label>\r\n                <input type=\"text\" id=\"type\" placeholder=\"type\" onChange={e => this.setState({ type: e.target.value })} />\r\n\r\n                <label htmlFor=\"mass\">Weight:</label>\r\n                <input type=\"text\" id=\"mass\" placeholder=\"mass\" onChange={e => this.setState({ mass: e.target.value })} />\r\n\r\n                <button value=\"add\"\r\n                    onClick={() => {\r\n                        this.props.onAdd({\r\n                            name: this.state.name,\r\n                            type: this.state.type,\r\n                            mass: this.state.mass\r\n                        })\r\n                    }}>Add Robot</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RobotForm;","import React, { Component } from 'react'\r\nimport RobotList from './RobotList'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      \tA list of robots\r\n      \t<RobotList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}